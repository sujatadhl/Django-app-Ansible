- name: Update apt package cache
  ansible.builtin.apt:
    update_cache: yes

- name: Install dependencies
  ansible.builtin.apt:
     name: "{{ item }}"
     state: present 
  loop:
     - libssl-dev 
     - zlib1g-dev 
     - libbz2-dev 
     - libreadline-dev 
     - libsqlite3-dev 
     - llvm 
     - libncursesw5-dev 
     - xz-utils 
     - tk-dev 
     - libxml2-dev 
     - libxmlsec1-dev 
     - libffi-dev 
     - liblzma-dev
     - python3-pip
     - python3-venv
     
- name: Remove existing Pyenv directory if present
  ansible.builtin.file:
    path: /root/.pyenv
    state: absent    

- name: Download pyenv installation script
  ansible.builtin.get_url:
    url: "https://pyenv.run"
    dest: "/root/pyenv_install.sh"
    mode: "055"

- name: Execute installation file 
  ansible.builtin.command: 
    cmd: /root/pyenv_install.sh

- name: Setup environment files 
  ansible.builtin.lineinfile:
    path: "{{ ansible_home }}/.bashrc"
    line: |
      export PYENV_ROOT="$HOME/.pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init --path)"
      eval "$(pyenv init -)" 

- name: Execute "$SHELL" command
  ansible.builtin.shell:
    cmd: "exec \"$SHELL\""

- name: install python version
  args:
    executable: /bin/bash
  ansible.builtin.command:
    cmd: "pyenv install {{ python_version }}"
    creates: "{{ ansible_env.HOME }}/.pyenv/versions:3.7.2"
  environment:
    PATH: "{{ ansible_env.HOME }}/.pyenv/bin:{{ ansible_env.PATH }}"  

- name: Copy a project to private EC2
  ansible.builtin.copy:
    src: "/home/sujata/simple-django-project-main/"
    dest: "{{ app_path }}"

- name: Set local pyenv
  args:
    executable: /bin/bash
    chdir: "{{ app_path }}"
  ansible.builtin.command: 
    cmd: "pyenv local {{ local_version }}"
  environment:
    PATH: "{{ ansible_env.HOME }}/.pyenv/bin:{{ ansible_env.PATH }}"     

- name: Create a virtual environment
  shell: "{{ ansible_env.HOME }}/.pyenv/bin/pyenv virtualenv 3.7.2 myenv"
  args:
    creates: "{{ ansible_env.HOME }}/.pyenv/versions/3.7.2/envs/myenv"

- name: Add virtual environment to bashrc
  lineinfile:
    path: '{{ ansible_env.HOME }}/.bashrc'
    line: 'pyenv activate myenv'
    state: present    

- name: Activate virtual environment and install requirements
  shell: |
    source {{ ansible_env.HOME }}/.pyenv/versions/{{ python_version }}/envs/myenv/bin/activate && \
    cd {{ app_path }}/simple-django-project-main && \
    pip install -r requirements.txt
  args:
    executable: /bin/bash

- name: Configure Django settings
  ansible.builtin.template:
    src: templates/settings.py.j2
    dest: /home/ubuntu/app/panorbit/settings.py    

- name: Import .sql file 
  shell: mysql -u root < {{ app_path }}/world.sql     

- name: Apply database migrations
  shell: |
    source {{ ansible_env.HOME }}/.pyenv/versions/{{ python_version }}/envs/myenv/bin/activate && \
    cd {{ app_path }}/simple-django-project-main && \
    python manage.py makemigrations && \
    python manage.py migrate
  args:
    executable: /bin/bash

- name: Rebuild search index
  shell: |
    source {{ ansible_env.HOME }}/.pyenv/versions/{{ python_version }}/envs/myenv/bin/activate && \
    cd {{ app_path }}/simple-django-project-main && \
    python manage.py rebuild_index
  args:
    executable: /bin/bash

- name: Run Django server
  shell: |
    source {{ ansible_env.HOME }}/.pyenv/versions/{{ python_version }}/envs/myenv/bin/activate && \
    cd {{ app_path }}/simple-django-project-main && \
    nohup python manage.py runserver 0:8001 &
  args:
    executable: /bin/bash